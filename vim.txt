VI命令使用大全（删除精华）
标签： 正则表达式commandphpn2编译器lisp
2010-04-08 18:53 9202人阅读 评论(0) 收藏 举报
 分类： Linux（11）  
:.,+3 s/^/#/g            注释从当前行起的后三行（不含当前行）

vi替换命令用法详解：
引用
:ranges/pat1/pat2/g 
其中 
: 这是Vi的命令执行界面。 
range
是命令执行范围的指定，可以使用百分号（%）表示所有行，使用点（.）表示当前行，使用美元符号（$）表示最后一行。你还可以使用行号，例如10,20表
示第10到20行，.,$表示当前行到最后一行，.+2,$-5表示当前行后两行直到全文的倒数第五行，等等。 
s 表示其后是一个替换命令。

pat1 这是要查找的一个正则表达式，这篇文章中有一大堆例子。

pat2 这是希望把匹配串变成的模式的正则表达式，这篇文章中有一大堆例子。 
g
可选标志，带这个标志表示替换将针对行中每个匹配的串进行，否则则只替换行中第一个匹配串。
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
vi常用操作(较全)
1)文件操作 
vi FileName 打开文件 FileName,并将光标置于第一行首。 
vi +n FileName 打开文件 FileName,并将光标置于第 n 行首。 
vi + FileName 打开文件 FileName,并将光标置于最后一行。 
vi + /pattern File 打开文件 File,并将光标置于其中第一个于 pattern
匹配的字符串处。 
vi –r FileName 在上次正用 vi 编辑 FileName 发生系统崩溃后,恢复FileName。 
vi File1 … Filen 打开多个文件,依次对之进行编辑。 

:%!xxd 按十六进制查看当前文件 
:%!xxd -r 从十六进制返回正常模式 

:n1,n2 co n3 将 n1 行到 n2 行之间的内容拷贝到第 n3 行下。 
:n1,n2 m m3 将 n1 行到 n2 行之间的内容移至第 n3 行下。 
:n1,n2 d 将 n1 行到 n2 行之间的内容删除。 
:n1,n2 w filename 将 n1 行到 n2 行之间的内容保存到文件 filename 中 
:n1,n2 w! Command 将文件中n1行到n2行的内容作为 Command的输入并执行之， 
若不指定 n1、n2，则将整个文件内容作为 Command 的输入。 
:r! Command 将命令 Command 的输出结果放到当前行。 
:nr <文件> 把<文件>插入到第n行 
:so <文件> 读取<文件>,再执行文件里面的命令(文件中的命令应该都是一些ex命令) 
:l1,l2w <文件> 把第l1和第l2行之间的文本写到<文件>中去 
:w >> <文件> 添加到<文件>末尾. 也可以使用行号 
:e! 重新编辑当前文件,忽略所有的修改 



·(、[、{、}、]、)对应显示 
% 显示当前(、[、{ 、}、] 、)的对应项 
) 显示对应的( 
) 显示对应的[ 
] 显示对应的{ 


·(、[、{、}、]、)内数据选择 
daB 删除{}及其内的内容 (在非v可视模式下) 
diB 删除{}中的内容 
ab 选择()中的内容 
ib 选择()中的内容( 不含() ) 

aB 选择{}中的内容 
iB 选择{}中的内容( 不含{} ) 

·语法提示与自动补齐 

★ <C-N><C-P> 插入模式下的单词自动完成 
★ <C-X><C-L> 行自动完成(超级有用) 

·设置ctags 
#ctags -f /usr/share/vim/vim63/funcs.tags -R /opt/j2sdk/src
/usr/src/kernels/2.6.9-5.EL-i686 

^p 自动补齐上下文已有相近项 
^n 自动补齐~/.tags中的相近函数 
^[ 显示~/.tags中的光标下的函数的原型, 
按^t退出函数 
:pta 函数名 预览窗口快速打开相应函数所在文件，并将光标定位在对应函数的开头 
K 显示光标下的C函数的man说明手册 

·变量定位 
gd 转到光标下局部变量的定义处 
Gd 转到光标下全局变量的定义处 


·编译选项 
:cn 命令会把你带到下一个出错地点，而不考虑它在什么文件里。 
:cc 命令会向你显示当前错误的编译器输出信息； 
:cl 会生成一个列有项目所有错误的列表，以供浏览这些错误 



3]光标移动 
·字符 
h 光标左移一个字符。 
l 光标右移一个字符。 

·字 
w 或 W 光标右移一个字至字首。 
B 或 b 光标左移一个字至字首。 
E 或 e 光标右移一个字至字尾。 

·句} 光标移至句尾。 
( 光标移至句首。 

·段) 光标移至段落开头。 
{ 光标移至段落结尾。 

·行k 或 Ctrl+p 光标上移一行。 
j 或 Ctrl+n 光标下移一行。 
Enter 光标下移一行。 
nG 光标移至第 n 行首。 
n+ 光标下移 n 行。 
n- 光标上移 n 行。 
n$ 光标移至第 n 行尾。 
0 光标移至当前行首。 
$ 光标移至当前行尾。 

·屏幕 
H 光标移至屏幕顶行。 
M 光标移至屏幕中间行。 
L 光标移至屏幕最后行。 
Ctrl+u 向文件首翻半屏。 
Ctrl+d 向文件尾翻半屏。 
Ctrl+f 向文件尾翻一屏。 
Ctrl+b 向文件首翻一屏。 
nz 将第 n 行滚至屏幕顶部。不指定 n 时将当前行滚至屏幕顶。 

4}插入 

# 在文件中插入行号(不是显示行号，是插入！) 
★:g/^/exec "s/^/".strpart(line(".")." ", 0, 4) 

·光标 
i 在光标前插入。 
a 在光标后插入。 

·行 
I 在当前行首插入。 
A 在当前行尾插入。 
o 在当前行之下一新行插入。 
O 在当前行之上新开一行插入。 



5)替换 
r 替换当前字符。 
R 替换当前字符及其后的字符，直至按 ESC 键。 
s 从当前光标位置处开始，以输入的文本代替指定数目的字符。 
S 删除指定数目的行，并以所输入的文本代替。 

6)修改 
ncw 或 nCW 修改指定数目的字符。 
nCC 修改指定数目的行。 
:r filename 将文件 filename 插入在当前行之下 

7)查找替换 

/<C-R><C-W> 把狭义单词 <cword> 写到 搜索命令 行 
/<C-R><C-A> 把广义单词 <cWORD> 写到 搜索命令 行 

:g/str/s/str1/str2/g 
第一个g表示对每一个包括s1的行都进行替换， 
第二个g表示对每一行的所有进行替换 
包括str的行所有的str1都用str2替换 
:%s/f $/for$/g 将每一行尾部的“f ”（f键和空格键）替换为for 
:%s/^/mv /g 在每一行的头部添加“mv ”（mv键和空格键） 

:s/fred/<c-r>a/g 替换fred成register a中的内容，呵呵 


:g/<input|<form/p 显示含<input或<form的行 


# 替换一个visual区域 
# 选择一个区域，然后输入 :s/Emacs/Vim/ 等等，vim会自动进入:模式 
:'<,'>s/Emacs/Vim/g 前面的'<,'>是vim自动添加的 


# 在多个文档中搜索 
:bufdo /searchstr 
:argdo /searchstr 




复制与剪切 
xp 交换前后两个字符的位置 
ddp 上下两行的位置交换 
:g/fred/t$ 拷贝行，从fred到文件末尾(EOF) 



9)窗口操作 
:vne [filename] 
:sp [filename] 
:S [filename] 
:new [filename] 
:^w + ^r 交换两个窗口的位置 
^w = 窗口等宽 
:res -n 窗口高度减小n 
:res +n 窗口高度增大n 
:vert res -n 
:vert res +n 

10)DOS格式文本转成Unix格式文本 
:1,$s/^M//g 

11)书签 
在阅读和编写大的程序文件时，利用标记（书签）功能定位是十分有帮助的。 

将光标移到想做标记的位置。假如做一个名为“debug1”的标记，那么用户可在命令模式下输入做标记的命令“mdebug1”，然后敲入回车键，一个名
为“debug1”的标记就做好了。 
接下来用户可以随意将光标移到其它的位置，当在命令模式下输入“`debug1”后，就能快速回到“debug1”的标记所在行的行首。 


12)删除操作 

:%s/r//g 删除DOS方式的回车^M 
:%s= *$== 删除行尾空白 

:%s/^(.*)n1/1$/ 删除重复行 

:%s/^.{-}pdf/new.pdf/ 只是删除第一个pdf 

:%s/<!--_.{-}-->// 又是删除多行注释（咦？为什么要说「又」呢？） 

:g/^s*$/d 删除所有空行 
:g!/^dd/d 删除不含字符串'dd'的行 
:v/^dd/d 同上 （译释：v == g!，就是不匹配！） 

:g/str1/,/str2/d 删除所有第一个含str1到第一个含str2之间的行 


:v/./.,/./-1join 压缩空行 
:g/^$/,/./-j 压缩空行 

ndw 或 ndW 删除光标处开始及其后的 n-1 个字符。 
d0 删至行首。 
d$ 删至行尾。 
ndd 删除当前行及其后 n-1 行。 
x 或 X 删除一个字符。 
Ctrl+u 删除输入方式下所输入的文本。 
^R 恢复u的操作 
J 把下一行合并到当前行尾 
V 选择一行 
^V 按下^V后即可进行矩形的选择了 
aw 选择单词 
iw 内部单词(无空格) 
as 选择句子 
is 选择句子(无空格) 
ap 选择段落 
ip 选择段落(无空格) 
D 删除到行尾 
x,y 删除与复制包含高亮区 

dl 删除当前字符（与x命令功能相同） 
d0 删除到某一行的开始位置 
d^ 删除到某一行的第一个字符位置（不包括空格或TAB字符） 
dw 删除到某个单词的结尾位置 
d3w 删除到第三个单词的结尾位置 
db 删除到某个单词的开始位置 
dW 删除到某个以空格作为分隔符的单词的结尾位置 
dB 删除到某个以空格作为分隔符的单词的开始位置 
d7B 删除到前面7个以空格作为分隔符的单词的开始位置 
d） 删除到某个语句的结尾位置 
d4） 删除到第四个语句的结尾位置 
d（ 删除到某个语句的开始位置 
d） 删除到某个段落的结尾位置 
d{ 删除到某个段落的开始位置 
d7{ 删除到当前段落起始位置之前的第7个段落位置 
dd 删除当前行 
d/text 删除从文本中出现“text”中所指定字样的位置， 
一直向前直到下一个该字样所出现的位置（但不包括该字样）之间的内容 
dfc
删除从文本中出现字符“c”的位置，一直向前直到下一个该字符所出现的位置（包括该字符）之间的内容 
dtc 删除当前行直到下一个字符“c”所出现位置之间的内容 
D 删除到某一行的结尾 
d$ 删除到某一行的结尾 
5dd 删除从当前行所开始的5行内容 
dL 删除直到屏幕上最后一行的内容 
dH 删除直到屏幕上第一行的内容 
dG 删除直到工作缓存区结尾的内容 
d1G 删除直到工作缓存区开始的内容 
修改命令操作 
r 更改当前字符 
cw 修改到某个单词的结尾位置 
c3w 修改到第三个单词的结尾位置 
cb 修改到某个单词的开始位置 
cW 修改到某个以空格作为分隔符的单词的结尾位置 
cB 修改到某个以空格作为分隔符的单词的开始位置 
c7B 修改到前面7个以空格作为分隔符的单词的开始位置 
c0 修改到某行的结尾位置 
c} 修改到某个语句的结尾位置 
c4} 修改到第四个语句的结尾位置 
c（ 修改到某个语句的开始位置 
c） 修改到某个段落的结尾位置 
c{ 修改到某个段落的开始位置 
c7{ 修改到当前段落起始位置之前的第7个段落位置 
ctc 修改当前行直到下一个字符c所出现位置之间的内容 
C 修改到某一行的结尾 
cc 修改当前行 
5cc 修改从当前行所开始的5行内容 
. 重复上一次修改！ 


13}Set 选项设置 
set all 列出所有选项设置情况。 
set term 设置终端类型。 
set ignorecase 在搜索中忽略大小写。 
set list 显示制表位(^I)和行尾标志($)。 
set number 显示行号。 
set showmode 示用户处在什么模式下 
set report 显示由面向行的命令修改国的行数目。 
set terse 显示简短的警告信息。 
set warn 在转到别的文件时，若没有保存当前文件则显示 No write 信息。 
set autowrite 在“:n”和“:!”命令之前都自动保存文件 
set nomagic 允许在搜索模式中，使用前面不带/的特殊字符。 
set nowrapscan 禁止 vi 在搜索到达文件两端时,又从另一端开始。 
set mesg 允许 vi 显示其他用户用 write 写到自己终端上的信息。 

autoindent (ai) noai 使新行自动缩进,和上(下)行的位置对齐 
autoprint (ap) ap 每条命令之后都显示出修改之处 
autowrite (aw) noaw 在:n,:!命令之前都自动保存文件 
beautify (bf) nobf
在输入的时候忽略所有的控制字符(除了制表键(tab),换行(newline),进纸(formfeed)) 
directory= (dir=) /tmp 存放缓冲区的目录名 
edcompatible noedcompatible 在替换的时候使用类ed的用法 
errorbells (eb) errorbells 出错的时候响铃 
exrc (ex) noexrc 允许在主目录(home)外面之外放.exrc文件 
hardtabs= (ht=) 8 设置硬制表的边界 
ignore case (ic) noic 正规式里忽略大小写 
lisp nolisp 打开lisp模式 
list nolist 显示所有的制表键和行的结尾 
magic agic 可以使用更多的正规表达式 
mesg mesg 允许向终端发送消息 
number (nu) nonumber 显示行号 
open open 允许开放和可视化 
optimize (opt) optimize 优化吞吐量,打印时不发回车 
paragraphs= (para=) IPLPPPQPPLIbp 设置{ & }的分界符 
prompt prompt 命令模式下的输入给出:的提示符 
readonly (ro) noro 除非用!号否则不准保存文件 
redraw noredraw 当编辑的时候重绘屏幕 
remap remap 允许宏指向其他的宏 
report= 5 如果影响的行数>这个数的话就报告 
scroll 1/2 window 下卷屏幕时滚动屏幕的数目, 同样这也是z命令输出的行数(z
输出2倍滚屏的大小) 
sections= SHNHH HU 定义节的末尾(当使用命令[[ 和 ]] 时) 
shell= (sh=) /bin/sh 缺省的SHELL,如果设置了环境变量SHELL的话,就使用变量 
shiftwidth= (sw=) 8 当使用移动(shift)命令时移动的字符数 
showmatch (sm) nosm 显示{, }, (, ), [, 或者 ] 的匹配情况 
showmode noshowmode 显示你处在什么模式下面 
slowopen (slow) 插入之后不要立刻更新显示 
tabstop= (ts=) 8 设置制表停止位(tabstop)的长度 
taglength= (tl=) 0 重要标记的字符个数(0表示所有的字符) 
tags= tag, /usr/lib/tags 定义包含标记的文件路径 
term= 设置终端类型 
terse noterse 显示简短的错误信息 
timeout (to) timeout 一秒钟后键盘映射超时 
ttytype= 设置终端类型 
warn warn 显示"No write since last change"信息 
window= (w=) 可视模式下窗口的行数 
wrapmargin= (wm=) 0 右边距,大于0的话最右边的单词将折行,留出n个空白位置 
wrapscan (ws) ws 查找到文件尾后再重头开始 
writeany (wa) nowa 可以保存到任意一个文件去 

14}特殊字符 
^ 匹配字符串位于行首。 
$ 匹配字符串位于行尾。 
. 用在模式串中，表示任何单个字符。 
在命令模式下，重复上次的命令。 
* 在模式串中，表示其前字符可出现任意多次。 
[] 用在模式串中,表示指定方位内字符，其中可用-表示一个字 
符范围，用^表示不在某个范围内的字符。 
ESC 从插入状态转换到命令状态 
^[ 功能同 ESC 

15]大小写转换 
guu 行小写 
gUU 行大写 
g~~ 行翻转（当然指大小写啦） 

guw 字小写(狭义字) 译注：建议对比iw 
gUw 字大写(狭义字) 
g~w 字翻转(狭义字) 

vEU 字大写(广义字) 
vE~ 字翻转(广义字) 

ggguG 把整个文章全部小写（ft!bt!） 

16) 跳转足迹'. 跳到最后修改的那一行 (超级有用)(ft,怎么又是这个评价) 
`. 不仅跳到最后修改的那一行，还要定位到修改点 
<C-O> 依次沿着你的跳转记录向回跳 (从最近的一次开始) 
<C-I> 依次沿着你的跳转记录向前跳 
:ju(mps) 列出你跳转的足迹 

17)命令历史 
:history 列出历史命令记录 
:his c 命令行命令历史 
:his s 搜索命令历史 
q/ 搜索命令历史的窗口 
q 命令行命令历史的窗口 
:<C-F> 历史命令记录的窗口 

18]寄存器 
# 列出寄存器(Registers) 
:reg 显示所有当前的registers 
"1p 表示引用register，1表示一个名字叫做1的register，p就是粘贴（paste）命令 

译释： 
"也用来定义register 
先输入 ",表示定义register 
然后输入名字，如0~9,a~z 
然后执行删除或复制命令，如dd或y， 
或者是visual模式下的d(删除选中的部分)或y(复制选中的部分) 
则被删除或复制的部分就被存入了这个命名的register 

观察：一个特殊的register, "" ，里面存储了一个匿名的删除/复制 
在你执行dd或y的时候，被作用的部分被存到了""中 

19}命令行 
"ayy@a 把当前行作为一个Vim命令来执行 
译释："ayy 是定义当前行到register a，然后@a是执行register a中存储的指令 

10yy copy 当前行以下10行 

11} 排序 
:%!sort -u 使用sort程序排序整个文件（用结果重写文件） 
!1） sort -u 排序当前段落 (只能在normal模式下使用!!) 
:.,+5!sort 排序当前行及以下5行 

20） 列操作 

:%s= [^ ]+$=&&= 复制最后一列 
:%s= f+$=&&= 一样的功能 
:%s= S+$=&& ft,还是一样 

:s/(.*).*)/2"1/ 颠倒用:分割的两个字段 

:%s(w+s+){2})str1:1str2: 处理列，替换所有在第三列中的str1 

:%sw+)(.*s+)(w+)$:321: 交换第一列和最后一列 (共4列) 


·.vimrc 

" Use Vim settings, rather then Vi settings (much better!). 
set nocompatible 

"c风格的缩进 
:set expandtab "不使用tab只使用空格 
:set cindent shiftwidth=4 

"自动缩进 
:set ai 


"语法 
":set filetype=j***a 
:set syntax=j***a 

"键入)、] 、}，显示(、[、{ 
:set showmatch 

"手工定义折叠 
:set foldmethod=manual 


"标签文件位置 
set tags=/usr/share/vim/vim63/funcs.tags 

"在插入模式下通过按[Ctrl]N自动地将任何类、方法或者字段名补齐 
set complete+=k 

" 不要用声音烦我！ 
set visualbell 

"历史 
:set history=50 

"显示行列位置 
:set ruler 

"设置字符编码 
set fileencodings=gb2312 
"set encoding=euc-cn 

"设置ruler 
set ruler 

"显示当前命令 
set showcmd 

"incsearch 
set incsearch 

" allow backspacing over everything in insert mode 
set backspace=indent,eol,start 

"自动检测文件类型 
:filetype on 


"""""""""""快捷键定
义""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
if version >= 600 

"查找 
"map <C-H> / 

"查找函数原型 
map <C-H> yiw/^/(/s/)*/(sub/)//|/(function/)/(/s/)*<C-r>"<CR> 

"继续查找 
map <F3> n 


"使用<F10>显示类、属性、方法列表 
map <F2> :Tlist<CR> 

" 用compiler定义的编译程序来编译当前程序 
"map <F9> :make "%"<CR> 

"使用<F11>来进行PHP语法检测 
map <F11> :!php -l "%" <CR> 

map ;w :call FormatText()<CR> 

"查找当前光标下的字 
map <F4> /<C-R><C-W><CR> 
endif 
"""""""""""::快捷键定
义""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 

"""""""""""格式化文
件""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 
function FormatText() 
:%s//t/ /g "把/t换成4个空格 
:%s/ *$//g "去掉行尾空格 

endfunction 

"""""""""""格式化文
件""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 



""""""""""显示行尾的tab和多余空格""""""""""""""""""""""""""""""""""""""""""""""" 
set listchars=tab:>-,trail:~ 
set list 
syntax match Trail " +$" 
highlight def link Trail Todo 

""""""""""::显示行尾的tab和多余空格""""""""""""""""""""""""""""""""""""""""""""" 

function LastMod() 
if line("$") > 5 
let l = 5 
else 
let l = line("$") 
endif 
exe "1," . l . "/CnsProgCMTime/s/CnsProgCMTime .*/CnsProgCMTime " .
strftime("%Y-%m-%d %H:%M:%S")."/e" 
endfunction 

"map <F5> :call LastMod()<CR> 

"""""""""""自动加注释的*星号"""""""""""""""""""""""""""""""""""""""""""""""""""" 
"使用如/* ... */ 的注释时,r在插入模式下回车时插入* ; 
"o 在普通模式下，使用 "o" 或 "O" 时插入* 
:set formatoptions=tcro 

"""""""""""::自动加注释的*星号"""""""""""""""""""""""""""""""""""""""""""""""""" 



vi扩展的正则表达式 

| 指示交替，如home|house 指匹配home或house 

() 用于分组，如home|house可以写为ho(me|use) 
*可以用到()上(home|house)* 可以匹配home, homehouse,househome,
homehousehomehouse 

/(.../) 实际匹配的文本可以使用/1、/2等在替换命令的替换部分进行检索 

+
可匹配正则表达式的一次或多次出现，既可以是单个字符也可以是()或/(.../)括起的内容，至少匹配一次 
ho(use|me)+ 指至少是house或home不允许是空 

? 指前面正则表达式的零次或一次出现，表示出现或未出现。如free?d
将匹配fred或freed除此不能匹配其他文本 


{...} 定义区间表达式。区间表达式描述了表示重复次数的计数数字。 同/{.../} 
{n} (home|house){2} 只能匹配homehome, homehouse, househome, househouse 
{n,} 
{n,m} 
{,n} 

编译相关 

·用编译器来编译 当前文件 
:!perl -c % 
:!php -l % 用php来检查错误 
:!php -q % 用php来运行程序 


·编译当前程序为a.out并执行该./a.out 
:!gcc % -o a.out && ./a.out 
执行结果 
old umask is %#0 
new umask is %#0 

·编译错误信息 
:cl! 列出所有错误信息的详细列表 

:cl 列出当前条错误信息 
:cn 列出下一条错误信息 
:cp 列出上一条错误信息 


:cnew 最新错误信息条数 
:cold 旧的错误信息条数 

:cwin 或 :copen 打开错误信息窗口 
:cclose 关闭上面打开的信息窗口 



自动补齐 

CTRL-X CTRL-F 文件名 
CTRL-X CTRL-L 整行 
CTRL-X CTRL-D 宏定义 (并搜索所包含的文件) 
CTRL-X CTRL-I 当前文件以及所包含的文件 
CTRL-X CTRL-K 词典文件内的单词 
CTRL-X CTRL-T 近义词词典文件内的单词 
CTRL-X CTRL-] 标记 
CTRL-X CTRL-V Vim 命令行 



C程序设计 

gd 反色显示光标下局部标识符串的所有出现，并转到第一次出现处。 
gD 反色显示光标下全局标识符串的所有出现，并转到第一次出现处。 

-------------------------------------------------------------------------------------- 

:checkpath 列出所有include的头文件 
-------------------------------------------------------------------------------------- 

[i 显示函数定义 
extern __mode_t umask (__mode_t __mask) __THROW; 

-------------------------------------------------------------------------------------- 

[+CTRL+i 跳转到[i所标识的函数定义处 
--------------------------------------------------------------------------------------[I
列出当前文件及包含文件内的含有当前字符的行 
--------------------------------------------------------------------------------------[d
显示由#define所定义的标识符的定义语句 

printf(|tom); 
#define tom "yaoshuyin" 
-------------------------------------------------------------------------------------- 
CTRL+] 跳转到光标当前位置的标签处 （例如：一个函数的定义）。 
CTRL+T 跳转到执行 CTRL-] 命令前的地方。 
:tselect 从一连串匹配的标签中选出一个。 

[/ 跳转到注释开始的位置。 
]/ 跳转到注释结束的位置。 

---------------------------------------------------------------- 

[# 返回到未闭合的 #if, #ifdef, or #else 处。 
]# 前进到未闭合的 #else 或 #endif 处。 

[( 返回到未闭合的 '(' 处。 
)) 前进到未闭合的 ']' 处。 

[{ 跳转到最近对应的 '{' 处。 
}} 跳转到最近对应的 ']' 处。 


·字符集和进制转换 
ga 显示光标处字符的ascii,hex,oct,...晕菜的一堆转换 

如 s 前按ga 
<s> 115, Hex 73, Octal 163 

列块操作 

<C-V>选中列块 
I<string><ESC> 在块的每一行首加上string 
A<string><ESC> 在块的每一行尾加上string 
C<string><ESC> 修改选中的列块(即删除并输入新内容 ) 
c<string><ESC> 修改选中的列块(即删除并输入新内容 ) 
> 左移Tab宽度 

vimrc中的文件名及路径 

如在D:/cnscnprogrames/Vim/vim63/下编辑 vi tmp/file.j***a
(即D:/cnscnprogrames/Vim/vim63/tmp/file.j***a) 


expand("%") #tmp/file.j***a 
expand("%:p") #D:/cnscnprogrames/Vim/vim63/tmp/file.j***a 
expand("%:h") #tmp 
expand("%:t") #file.j***a 
expand("%:e") #j***a 
expand("%:t:r") #file 
expand("%:r") #tmp/file 




·一个简单编译器（编译、执行常见程序） 
#vi ~/.vimrc 

"定义F9来编译、执行程序 
map <F9> :call ProgCompileRun() <CR> 

func ProgCompileRun() 
"s***e the current file first 
:w 

"取得程序后缀名 如j***a php pl py 
let ext = expand("%:e") 

"编译J***a 
if ext == "j***a" 
if expand("%:h") != "" 
:!j***ac % && j***a -classpath expand("%:h") %:t:r 
else 
:!j***ac % && j***a %:t:r 
endif 
return 
endif 

"执行php 
if ext == "php" 
:!php % 
return 
endif 

"编译执行c/cc/cpp 
if ext == "c" || ext == "cc" || ext == "cpp" 
:!gcc % -o a.out && ./a.out 
return 
endif 

"编译执行perl 
if ext == "pl" 
:!perl -c % 
return 
endif 

"编译执行Python 
if ext == "py" 
:!python % 
return 
endif 

endfunc
